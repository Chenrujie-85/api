// Copyright Aeraki Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: dubbo/v1alpha1/dubbo_authorization_policy.proto

// $schema: dubbo.aeraki.io.v1alpha1.DubboAuthorizationPolicy
// $title: Authorization Policy
// $description: Configuration for access control on Dubbo services.
//
// Dubbo Authorization Policy enables access control on Dubbo services in the mesh.
//
// Authorization policy supports DENY and ALLOW actions for access control. When DENY and ALLOW actions
// are used for a workload at the same time, the DENY action is evaluated first, then the ALLOW action.
// The evaluation is determined by the following rules:
//
// 1. If there are any DENY policies that match the request, deny the request.
// 2. If there are no ALLOW policies for the workload, allow the request.
// 3. If any of the ALLOW policies match the request, allow the request.
// 4. Deny the request.
//
// Here is an example of Dubbo Authorization Policy:
//
// It sets the `action` to "ALLOW" to create an allow policy. The default action is "ALLOW"
// but it is useful to be explicit in the policy.
//
// It allows requests from:
//
// - service account "cluster.local/ns/dubbo/sa/dubbo-consumer"
//
// to access the Dubbo service with:
//
// - "sayHello" method at interface "org.apache.dubbo.samples.basic.api.DemoService"
//
// Any other requests will be denied.
//
// ```yaml
// apiVersion: dubbo.aeraki.io/v1alpha1
// kind: DubboAuthorizationPolicy
// metadata:
//   name: demo
//   namespace: istio-system
// spec:
//   action: ALLOW
//   rules:
//   - from:
//     - source:
//         principals: ["cluster.local/ns/dubbo/sa/dubbo-consumer"]
//     to:
//     - operation:
//         interfaces: ["org.apache.dubbo.samples.basic.api.DemoService"]
//         methods: ["sayHello"]
// ```
//
// The following is another example that sets `action` to "DENY" to create a deny policy.
// It denies requests from the "dev" namespace to all the methods on all Interfaces
// in the "dubbo" namespace.
//
// ```yaml
// apiVersion: dubbo.aeraki.io/v1alpha1
// kind: DubboAuthorizationPolicy
// metadata:
//   name: demo
//   namespace: dubbo
// spec:
//   action: DENY
//   rules:
//   - from:
//     - source:
//         namespaces: ["dev"]
//     to:
//     - operation:
//         interfaces: ["*"]
//         methods: ["*"]
// ```

//
// Authorization Policy scope (target) is determined by "metadata/namespace" and
// an optional "selector".
//
// - "metadata/namespace" tells which namespace the policy applies. If set to root
// namespace, the policy applies to all namespaces in a mesh.

package v1alpha1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Action specifies the operation to take.
type DubboAuthorizationPolicy_Action int32

const (
	// Allow a request only if it matches the rules. This is the default type.
	DubboAuthorizationPolicy_ALLOW DubboAuthorizationPolicy_Action = 0
	// Deny a request if it matches any of the rules.
	DubboAuthorizationPolicy_DENY DubboAuthorizationPolicy_Action = 1
)

// Enum value maps for DubboAuthorizationPolicy_Action.
var (
	DubboAuthorizationPolicy_Action_name = map[int32]string{
		0: "ALLOW",
		1: "DENY",
	}
	DubboAuthorizationPolicy_Action_value = map[string]int32{
		"ALLOW": 0,
		"DENY":  1,
	}
)

func (x DubboAuthorizationPolicy_Action) Enum() *DubboAuthorizationPolicy_Action {
	p := new(DubboAuthorizationPolicy_Action)
	*p = x
	return p
}

func (x DubboAuthorizationPolicy_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DubboAuthorizationPolicy_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_dubbo_v1alpha1_dubbo_authorization_policy_proto_enumTypes[0].Descriptor()
}

func (DubboAuthorizationPolicy_Action) Type() protoreflect.EnumType {
	return &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_enumTypes[0]
}

func (x DubboAuthorizationPolicy_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DubboAuthorizationPolicy_Action.Descriptor instead.
func (DubboAuthorizationPolicy_Action) EnumDescriptor() ([]byte, []int) {
	return file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescGZIP(), []int{0, 0}
}

// DubboAuthorizationPolicy enables access control on Dubbo services.
//
// <!-- crd generation tags
// +cue-gen:DubboAuthorizationPolicy:groupName:dubbo.aeraki.io
// +cue-gen:DubboAuthorizationPolicy:version:v1alpha1
// +cue-gen:DubboAuthorizationPolicy:storageVersion
// +cue-gen:DubboAuthorizationPolicy:annotations:helm.sh/resource-policy=keep
// +cue-gen:DubboAuthorizationPolicy:labels:app=aeraki,chart=aeraki,heritage=Tiller,release=aeraki
// +cue-gen:DubboAuthorizationPolicy:subresource:status
// +cue-gen:DubboAuthorizationPolicy:scope:Namespaced
// +cue-gen:DubboAuthorizationPolicy:resource:categories=aeraki-io,dubbo-aeraki-io,plural=dubboauthorizationpolicies,shortNames=dap
// +cue-gen:DubboAuthorizationPolicy:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=dubbo.aeraki.io/v1alpha1
// +genclient
// +k8s:deepcopy-gen=true
// -->
type DubboAuthorizationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A list of rules to match the request. A match occurs when at least
	// one rule matches the request.
	//
	// If not set, the match will never occur. This is equivalent to setting a
	// default of deny for the target workloads.
	Rules []*Rule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	// Optional. The action to take if the request is matched with the rules.
	Action DubboAuthorizationPolicy_Action `protobuf:"varint,3,opt,name=action,proto3,enum=dubbo.aeraki.io.v1alpha1.DubboAuthorizationPolicy_Action" json:"action,omitempty"`
}

func (x *DubboAuthorizationPolicy) Reset() {
	*x = DubboAuthorizationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DubboAuthorizationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DubboAuthorizationPolicy) ProtoMessage() {}

func (x *DubboAuthorizationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DubboAuthorizationPolicy.ProtoReflect.Descriptor instead.
func (*DubboAuthorizationPolicy) Descriptor() ([]byte, []int) {
	return file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescGZIP(), []int{0}
}

func (x *DubboAuthorizationPolicy) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *DubboAuthorizationPolicy) GetAction() DubboAuthorizationPolicy_Action {
	if x != nil {
		return x.Action
	}
	return DubboAuthorizationPolicy_ALLOW
}

// Rule matches requests from a list of sources that perform a list of operations subject to a
// list of conditions. A match occurs when at least one source, one operation and all conditions
// matches the request. An empty rule is always matched.
//
// Any string field in the rule supports Exact, Prefix, Suffix and Presence match:
//
// - Exact match: "abc" will match on value "abc".
// - Prefix match: "abc*" will match on value "abc" and "abcd".
// - Suffix match: "*abc" will match on value "abc" and "xabc".
// - Presence match: "*" will match when value is not empty.
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. from specifies the source of a request.
	//
	// If not set, any source is allowed.
	From []*Rule_From `protobuf:"bytes,1,rep,name=from,proto3" json:"from,omitempty"`
	// Optional. to specifies the operation of a request.
	//
	// If not set, any operation is allowed.
	To []*Rule_To `protobuf:"bytes,2,rep,name=to,proto3" json:"to,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescGZIP(), []int{1}
}

func (x *Rule) GetFrom() []*Rule_From {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Rule) GetTo() []*Rule_To {
	if x != nil {
		return x.To
	}
	return nil
}

// Source specifies the source identities of a request. Fields in the source are
// ANDed together.
//
// For example, the following source matches if the principal is "admin" or "dev"
// and the namespace is "prod" or "test".
//
// ```yaml
// principals: ["admin", "dev"]
// namespaces: ["prod", "test"]
// ```
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A list of source peer identities (i.e. service account), which
	// matches to the "source.principal" attribute. This field requires mTLS enabled.
	//
	// If not set, any principal is allowed.
	Principals []string `protobuf:"bytes,1,rep,name=principals,proto3" json:"principals,omitempty"`
	// Optional. A list of negative match of source peer identities.
	NotPrincipals []string `protobuf:"bytes,2,rep,name=not_principals,json=notPrincipals,proto3" json:"not_principals,omitempty"`
	// Optional. A list of namespaces, which matches to the "source.namespace"
	// attribute. This field requires mTLS enabled.
	//
	// If not set, any namespace is allowed.
	Namespaces []string `protobuf:"bytes,3,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// Optional. A list of negative match of namespaces.
	NotNamespaces []string `protobuf:"bytes,4,rep,name=not_namespaces,json=notNamespaces,proto3" json:"not_namespaces,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Source) GetPrincipals() []string {
	if x != nil {
		return x.Principals
	}
	return nil
}

func (x *Source) GetNotPrincipals() []string {
	if x != nil {
		return x.NotPrincipals
	}
	return nil
}

func (x *Source) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *Source) GetNotNamespaces() []string {
	if x != nil {
		return x.NotNamespaces
	}
	return nil
}

// Operation specifies the operations of a request. Fields in the operation are
// ANDed together.
//
// For example, the following operation matches if the Dubbo interface is "org.apache.dubbo.samples.basic.api.DemoService"
// and the method is "sayHello".
//
// ```yaml
// interfaces: ["org.apache.dubbo.samples.basic.api.DemoService"]
// methods: ["sayHello"]
// ```
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. A list of interfaces, which matches to the Dubbo interface.
	//
	// If not set, any interfaces is allowed.
	Interfaces []string `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	// Optional. A list of negative match of interfaces.
	NotInterfaces []string `protobuf:"bytes,5,rep,name=not_interfaces,json=notInterfaces,proto3" json:"not_interfaces,omitempty"`
	// Optional. A list of methods, which matches to the Dubbo methods.
	//
	// If not set, any method is allowed.
	Methods []string `protobuf:"bytes,3,rep,name=methods,proto3" json:"methods,omitempty"`
	// Optional. A list of negative match of methods.
	NotMethods []string `protobuf:"bytes,7,rep,name=not_methods,json=notMethods,proto3" json:"not_methods,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescGZIP(), []int{3}
}

func (x *Operation) GetInterfaces() []string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Operation) GetNotInterfaces() []string {
	if x != nil {
		return x.NotInterfaces
	}
	return nil
}

func (x *Operation) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *Operation) GetNotMethods() []string {
	if x != nil {
		return x.NotMethods
	}
	return nil
}

// From includes a list or sources.
type Rule_From struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Source specifies the source of a request.
	Source *Source `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *Rule_From) Reset() {
	*x = Rule_From{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_From) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_From) ProtoMessage() {}

func (x *Rule_From) ProtoReflect() protoreflect.Message {
	mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_From.ProtoReflect.Descriptor instead.
func (*Rule_From) Descriptor() ([]byte, []int) {
	return file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Rule_From) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

// To includes a list or operations.
type Rule_To struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation specifies the operation of a request.
	Operation *Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *Rule_To) Reset() {
	*x = Rule_To{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule_To) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule_To) ProtoMessage() {}

func (x *Rule_To) ProtoReflect() protoreflect.Message {
	mi := &file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule_To.ProtoReflect.Descriptor instead.
func (*Rule_To) Descriptor() ([]byte, []int) {
	return file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Rule_To) GetOperation() *Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

var File_dubbo_v1alpha1_dubbo_authorization_policy_proto protoreflect.FileDescriptor

var file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x18, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a,
	0x18, 0x44, 0x75, 0x62, 0x62, 0x6f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f,
	0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x39, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x75, 0x62, 0x62, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10,
	0x01, 0x22, 0xfd, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f,
	0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x31, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e,
	0x54, 0x6f, 0x52, 0x02, 0x74, 0x6f, 0x1a, 0x40, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x38,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x47, 0x0a, 0x02, 0x54, 0x6f, 0x12, 0x41,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69,
	0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x96, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x09, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x75, 0x62, 0x62, 0x6f, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescOnce sync.Once
	file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescData = file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDesc
)

func file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescGZIP() []byte {
	file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescOnce.Do(func() {
		file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescData)
	})
	return file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDescData
}

var file_dubbo_v1alpha1_dubbo_authorization_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_dubbo_v1alpha1_dubbo_authorization_policy_proto_goTypes = []interface{}{
	(DubboAuthorizationPolicy_Action)(0), // 0: dubbo.aeraki.io.v1alpha1.DubboAuthorizationPolicy.Action
	(*DubboAuthorizationPolicy)(nil),     // 1: dubbo.aeraki.io.v1alpha1.DubboAuthorizationPolicy
	(*Rule)(nil),                         // 2: dubbo.aeraki.io.v1alpha1.Rule
	(*Source)(nil),                       // 3: dubbo.aeraki.io.v1alpha1.Source
	(*Operation)(nil),                    // 4: dubbo.aeraki.io.v1alpha1.Operation
	(*Rule_From)(nil),                    // 5: dubbo.aeraki.io.v1alpha1.Rule.From
	(*Rule_To)(nil),                      // 6: dubbo.aeraki.io.v1alpha1.Rule.To
}
var file_dubbo_v1alpha1_dubbo_authorization_policy_proto_depIdxs = []int32{
	2, // 0: dubbo.aeraki.io.v1alpha1.DubboAuthorizationPolicy.rules:type_name -> dubbo.aeraki.io.v1alpha1.Rule
	0, // 1: dubbo.aeraki.io.v1alpha1.DubboAuthorizationPolicy.action:type_name -> dubbo.aeraki.io.v1alpha1.DubboAuthorizationPolicy.Action
	5, // 2: dubbo.aeraki.io.v1alpha1.Rule.from:type_name -> dubbo.aeraki.io.v1alpha1.Rule.From
	6, // 3: dubbo.aeraki.io.v1alpha1.Rule.to:type_name -> dubbo.aeraki.io.v1alpha1.Rule.To
	3, // 4: dubbo.aeraki.io.v1alpha1.Rule.From.source:type_name -> dubbo.aeraki.io.v1alpha1.Source
	4, // 5: dubbo.aeraki.io.v1alpha1.Rule.To.operation:type_name -> dubbo.aeraki.io.v1alpha1.Operation
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_dubbo_v1alpha1_dubbo_authorization_policy_proto_init() }
func file_dubbo_v1alpha1_dubbo_authorization_policy_proto_init() {
	if File_dubbo_v1alpha1_dubbo_authorization_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DubboAuthorizationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_From); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule_To); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dubbo_v1alpha1_dubbo_authorization_policy_proto_goTypes,
		DependencyIndexes: file_dubbo_v1alpha1_dubbo_authorization_policy_proto_depIdxs,
		EnumInfos:         file_dubbo_v1alpha1_dubbo_authorization_policy_proto_enumTypes,
		MessageInfos:      file_dubbo_v1alpha1_dubbo_authorization_policy_proto_msgTypes,
	}.Build()
	File_dubbo_v1alpha1_dubbo_authorization_policy_proto = out.File
	file_dubbo_v1alpha1_dubbo_authorization_policy_proto_rawDesc = nil
	file_dubbo_v1alpha1_dubbo_authorization_policy_proto_goTypes = nil
	file_dubbo_v1alpha1_dubbo_authorization_policy_proto_depIdxs = nil
}
