// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: redis/v1alpha1/redisservice.proto

// $schema: redis.aeraki.io.v1alpha1.RedisService
// $title: Redis Service
// $description: Istio Redis Service Extension.

// `RedisService` provide a way to config redis service in service mesh.

package v1alpha1

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RedisService_ReadPolicy int32

const (
	RedisService_MASTER         RedisService_ReadPolicy = 0
	RedisService_PREFER_MASTER  RedisService_ReadPolicy = 1
	RedisService_REPLICA        RedisService_ReadPolicy = 2
	RedisService_PREFER_REPLICA RedisService_ReadPolicy = 3
	RedisService_ANY            RedisService_ReadPolicy = 4
)

// Enum value maps for RedisService_ReadPolicy.
var (
	RedisService_ReadPolicy_name = map[int32]string{
		0: "MASTER",
		1: "PREFER_MASTER",
		2: "REPLICA",
		3: "PREFER_REPLICA",
		4: "ANY",
	}
	RedisService_ReadPolicy_value = map[string]int32{
		"MASTER":         0,
		"PREFER_MASTER":  1,
		"REPLICA":        2,
		"PREFER_REPLICA": 3,
		"ANY":            4,
	}
)

func (x RedisService_ReadPolicy) Enum() *RedisService_ReadPolicy {
	p := new(RedisService_ReadPolicy)
	*p = x
	return p
}

func (x RedisService_ReadPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RedisService_ReadPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_redis_v1alpha1_redisservice_proto_enumTypes[0].Descriptor()
}

func (RedisService_ReadPolicy) Type() protoreflect.EnumType {
	return &file_redis_v1alpha1_redisservice_proto_enumTypes[0]
}

func (x RedisService_ReadPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RedisService_ReadPolicy.Descriptor instead.
func (RedisService_ReadPolicy) EnumDescriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{0, 0}
}

type Fault_Type int32

const (
	// Delays requests. This is the base fault; other faults can have delays added.
	Fault_DELAY Fault_Type = 0
	// Returns errors on requests.
	Fault_ERROR Fault_Type = 1
)

// Enum value maps for Fault_Type.
var (
	Fault_Type_name = map[int32]string{
		0: "DELAY",
		1: "ERROR",
	}
	Fault_Type_value = map[string]int32{
		"DELAY": 0,
		"ERROR": 1,
	}
)

func (x Fault_Type) Enum() *Fault_Type {
	p := new(Fault_Type)
	*p = x
	return p
}

func (x Fault_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fault_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_redis_v1alpha1_redisservice_proto_enumTypes[1].Descriptor()
}

func (Fault_Type) Type() protoreflect.EnumType {
	return &file_redis_v1alpha1_redisservice_proto_enumTypes[1]
}

func (x Fault_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fault_Type.Descriptor instead.
func (Fault_Type) EnumDescriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{2, 0}
}

// RedisService provide a way to config redis service in service mesh.
//
// <!-- crd generation tags
// +cue-gen:RedisService:groupName:redis.aeraki.io
// +cue-gen:RedisService:version:v1alpha1
// +cue-gen:RedisService:storageVersion
// +cue-gen:RedisService:subresource:status
// +cue-gen:RedisService:scope:Namespaced
// +cue-gen:RedisService:resource:categories=redis-aeraki-io,shortNames=rsvc
// +cue-gen:RedisService:printerColumn:name=Hosts,type=string,JSONPath=.spec.hosts,description="The destination hosts to which traffic is being sent"
// +cue-gen:RedisService:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp
// representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
// +cue-gen:RedisService:preserveUnknownFields:true
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=redis.aeraki.io/v1alpha1
// +genclient
// +k8s:deepcopy-gen=true
// -->
type RedisService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host     []string               `protobuf:"bytes,1,rep,name=host,proto3" json:"host,omitempty"`
	Settings *RedisService_Settings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	Redis    []*RedisService_Route  `protobuf:"bytes,3,rep,name=redis,proto3" json:"redis,omitempty"`
	// List of faults to inject. Faults currently come in two flavors:
	// - Delay, which delays a request.
	// - Error, which responds to a request with an error. Errors can also have delays attached.
	Faults []*Fault `protobuf:"bytes,4,rep,name=faults,proto3" json:"faults,omitempty"`
}

func (x *RedisService) Reset() {
	*x = RedisService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisService) ProtoMessage() {}

func (x *RedisService) ProtoReflect() protoreflect.Message {
	mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisService.ProtoReflect.Descriptor instead.
func (*RedisService) Descriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{0}
}

func (x *RedisService) GetHost() []string {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *RedisService) GetSettings() *RedisService_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *RedisService) GetRedis() []*RedisService_Route {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *RedisService) GetFaults() []*Fault {
	if x != nil {
		return x.Faults
	}
	return nil
}

// Percent specifies a percentage in the range of [0.0, 100.0].
type Percent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Percent) Reset() {
	*x = Percent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Percent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Percent) ProtoMessage() {}

func (x *Percent) ProtoReflect() protoreflect.Message {
	mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Percent.ProtoReflect.Descriptor instead.
func (*Percent) Descriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{1}
}

func (x *Percent) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Fault defines redis faults used for fault injection.
type Fault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fault type.
	Type Fault_Type `protobuf:"varint,1,opt,name=type,proto3,enum=redis.aeraki.io.v1alpha1.Fault_Type" json:"type,omitempty"`
	// Percentage of requests fault applies to.
	Percentage *Percent `protobuf:"bytes,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// Delay for all faults. If not set, defaults to zero
	Delay *duration.Duration `protobuf:"bytes,3,opt,name=delay,proto3" json:"delay,omitempty"`
	// Commands fault is restricted to, if any. If not set, fault applies to all commands
	// other than auth and ping (due to special handling of those commands in Envoy).
	Commands []string `protobuf:"bytes,4,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *Fault) Reset() {
	*x = Fault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fault) ProtoMessage() {}

func (x *Fault) ProtoReflect() protoreflect.Message {
	mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fault.ProtoReflect.Descriptor instead.
func (*Fault) Descriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{2}
}

func (x *Fault) GetType() Fault_Type {
	if x != nil {
		return x.Type
	}
	return Fault_DELAY
}

func (x *Fault) GetPercentage() *Percent {
	if x != nil {
		return x.Percentage
	}
	return nil
}

func (x *Fault) GetDelay() *duration.Duration {
	if x != nil {
		return x.Delay
	}
	return nil
}

func (x *Fault) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type RedisService_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates that prefix matching should be case insensitive.
	CaseInsensitive bool `protobuf:"varint,1,opt,name=case_insensitive,json=caseInsensitive,proto3" json:"case_insensitive,omitempty"`
	// Per-operation timeout in milliseconds. The timer starts when the first
	// command of a pipeline is written to the backend connection. Each response received from Redis
	// resets the timer since it signifies that the next command is being processed by the backend.
	// The only exception to this behavior is when a connection to a backend is not yet established.
	// In that case, the connect timeout on the cluster will govern the timeout until the connection
	// is ready.
	OpTimeout *duration.Duration `protobuf:"bytes,2,opt,name=op_timeout,json=opTimeout,proto3" json:"op_timeout,omitempty"`
	// Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
	// count
	EnableCommandStats bool `protobuf:"varint,3,opt,name=enable_command_stats,json=enableCommandStats,proto3" json:"enable_command_stats,omitempty"`
	// Maximum size of encoded request buffer before flush is triggered and encoded requests
	// are sent upstream. If this is unset, the buffer flushes whenever it receives data
	// and performs no batching.
	// This feature makes it possible for multiple clients to send requests to Envoy and have
	// them batched- for example if one is running several worker processes, each with its own
	// Redis connection. There is no benefit to using this with a single downstream process.
	// Recommended size (if enabled) is 1024 bytes.
	MaxBufferSizeBeforeFlush uint32 `protobuf:"varint,4,opt,name=max_buffer_size_before_flush,json=maxBufferSizeBeforeFlush,proto3" json:"max_buffer_size_before_flush,omitempty"`
	// The encoded request buffer is flushed N milliseconds after the first request has been
	// encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
	// If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
	// the timer should be set according to the number of clients, overall request rate and
	// desired maximum latency for a single command. For example, if there are many requests
	// being batched together at a high rate, the buffer will likely be filled before the timer
	// fires. Alternatively, if the request rate is lower the buffer will not be filled as often
	// before the timer fires.
	// If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
	// defaults to 3ms.
	BufferFlushTimeout *duration.Duration `protobuf:"bytes,5,opt,name=buffer_flush_timeout,json=bufferFlushTimeout,proto3" json:"buffer_flush_timeout,omitempty"`
	// `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
	// can be created at any given time by any given worker thread (see `enable_redirection` for
	// more details). If the host is unknown and a connection cannot be created due to enforcing
	// this limit, then redirection will fail and the original redirection error will be passed
	// downstream unchanged. This limit defaults to 100.
	MaxUpstreamUnknownConnections *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=max_upstream_unknown_connections,json=maxUpstreamUnknownConnections,proto3" json:"max_upstream_unknown_connections,omitempty"`
	// Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
	// forwarded to the same upstream. The hash key used for determining the upstream in a
	// consistent hash ring configuration will be computed from the hash tagged key instead of the
	// whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
	// implementation <https://redis.io/topics/cluster-spec#keys-hash-tags>`_.
	//
	// Examples:
	//
	// * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
	// * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
	EnableHashtagging bool `protobuf:"varint,7,opt,name=enable_hashtagging,json=enableHashtagging,proto3" json:"enable_hashtagging,omitempty"`
	// Accept `moved and ask redirection
	// <https://redis.io/topics/cluster-spec#redirection-and-resharding>`_ errors from upstream
	// redis servers, and retry commands to the specified target server. The target server does not
	// need to be known to the cluster manager. If the command cannot be redirected, then the
	// original error is passed downstream unchanged. By default, this support is not enabled.
	EnableRedirection bool `protobuf:"varint,8,opt,name=enable_redirection,json=enableRedirection,proto3" json:"enable_redirection,omitempty"`
	// Read policy. The default is to read from the primary.
	ReadPolicy RedisService_ReadPolicy `protobuf:"varint,9,opt,name=read_policy,json=readPolicy,proto3,enum=redis.aeraki.io.v1alpha1.RedisService_ReadPolicy" json:"read_policy,omitempty"`
	// Downstream auth.
	Auth *Auth `protobuf:"bytes,10,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *RedisService_Settings) Reset() {
	*x = RedisService_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisService_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisService_Settings) ProtoMessage() {}

func (x *RedisService_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisService_Settings.ProtoReflect.Descriptor instead.
func (*RedisService_Settings) Descriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RedisService_Settings) GetCaseInsensitive() bool {
	if x != nil {
		return x.CaseInsensitive
	}
	return false
}

func (x *RedisService_Settings) GetOpTimeout() *duration.Duration {
	if x != nil {
		return x.OpTimeout
	}
	return nil
}

func (x *RedisService_Settings) GetEnableCommandStats() bool {
	if x != nil {
		return x.EnableCommandStats
	}
	return false
}

func (x *RedisService_Settings) GetMaxBufferSizeBeforeFlush() uint32 {
	if x != nil {
		return x.MaxBufferSizeBeforeFlush
	}
	return 0
}

func (x *RedisService_Settings) GetBufferFlushTimeout() *duration.Duration {
	if x != nil {
		return x.BufferFlushTimeout
	}
	return nil
}

func (x *RedisService_Settings) GetMaxUpstreamUnknownConnections() *wrappers.UInt32Value {
	if x != nil {
		return x.MaxUpstreamUnknownConnections
	}
	return nil
}

func (x *RedisService_Settings) GetEnableHashtagging() bool {
	if x != nil {
		return x.EnableHashtagging
	}
	return false
}

func (x *RedisService_Settings) GetEnableRedirection() bool {
	if x != nil {
		return x.EnableRedirection
	}
	return false
}

func (x *RedisService_Settings) GetReadPolicy() RedisService_ReadPolicy {
	if x != nil {
		return x.ReadPolicy
	}
	return RedisService_MASTER
}

func (x *RedisService_Settings) GetAuth() *Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

// KeyMatch match the redis key prefix;
type RedisService_KeyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String prefix that must match the beginning of the keys. Envoy will always favor the
	// longest match.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Indicates if the prefix needs to be removed from the key when forwarded.
	RemovePrefix bool `protobuf:"varint,2,opt,name=remove_prefix,json=removePrefix,proto3" json:"remove_prefix,omitempty"`
}

func (x *RedisService_KeyMatch) Reset() {
	*x = RedisService_KeyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisService_KeyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisService_KeyMatch) ProtoMessage() {}

func (x *RedisService_KeyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisService_KeyMatch.ProtoReflect.Descriptor instead.
func (*RedisService_KeyMatch) Descriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{0, 1}
}

func (x *RedisService_KeyMatch) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *RedisService_KeyMatch) GetRemovePrefix() bool {
	if x != nil {
		return x.RemovePrefix
	}
	return false
}

type RedisService_RouteMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Match:
	//
	//	*RedisService_RouteMatch_Key
	Match isRedisService_RouteMatch_Match `protobuf_oneof:"match"`
}

func (x *RedisService_RouteMatch) Reset() {
	*x = RedisService_RouteMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisService_RouteMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisService_RouteMatch) ProtoMessage() {}

func (x *RedisService_RouteMatch) ProtoReflect() protoreflect.Message {
	mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisService_RouteMatch.ProtoReflect.Descriptor instead.
func (*RedisService_RouteMatch) Descriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{0, 2}
}

func (m *RedisService_RouteMatch) GetMatch() isRedisService_RouteMatch_Match {
	if m != nil {
		return m.Match
	}
	return nil
}

func (x *RedisService_RouteMatch) GetKey() *RedisService_KeyMatch {
	if x, ok := x.GetMatch().(*RedisService_RouteMatch_Key); ok {
		return x.Key
	}
	return nil
}

type isRedisService_RouteMatch_Match interface {
	isRedisService_RouteMatch_Match()
}

type RedisService_RouteMatch_Key struct {
	Key *RedisService_KeyMatch `protobuf:"bytes,1,opt,name=key,proto3,oneof"`
}

func (*RedisService_RouteMatch_Key) isRedisService_RouteMatch_Match() {}

type RedisService_Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RedisService_Destination) Reset() {
	*x = RedisService_Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisService_Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisService_Destination) ProtoMessage() {}

func (x *RedisService_Destination) ProtoReflect() protoreflect.Message {
	mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisService_Destination.ProtoReflect.Descriptor instead.
func (*RedisService_Destination) Descriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{0, 3}
}

func (x *RedisService_Destination) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RedisService_Destination) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type RedisService_Mirror struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route               *RedisService_Destination `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Percentage          *Percent                  `protobuf:"bytes,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	ExcludeReadCommands bool                      `protobuf:"varint,3,opt,name=exclude_read_commands,json=excludeReadCommands,proto3" json:"exclude_read_commands,omitempty"`
}

func (x *RedisService_Mirror) Reset() {
	*x = RedisService_Mirror{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisService_Mirror) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisService_Mirror) ProtoMessage() {}

func (x *RedisService_Mirror) ProtoReflect() protoreflect.Message {
	mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisService_Mirror.ProtoReflect.Descriptor instead.
func (*RedisService_Mirror) Descriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{0, 4}
}

func (x *RedisService_Mirror) GetRoute() *RedisService_Destination {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *RedisService_Mirror) GetPercentage() *Percent {
	if x != nil {
		return x.Percentage
	}
	return nil
}

func (x *RedisService_Mirror) GetExcludeReadCommands() bool {
	if x != nil {
		return x.ExcludeReadCommands
	}
	return false
}

type RedisService_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Match  *RedisService_RouteMatch  `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	Route  *RedisService_Destination `protobuf:"bytes,2,opt,name=route,proto3" json:"route,omitempty"`
	Mirror []*RedisService_Mirror    `protobuf:"bytes,3,rep,name=mirror,proto3" json:"mirror,omitempty"`
}

func (x *RedisService_Route) Reset() {
	*x = RedisService_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisService_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisService_Route) ProtoMessage() {}

func (x *RedisService_Route) ProtoReflect() protoreflect.Message {
	mi := &file_redis_v1alpha1_redisservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisService_Route.ProtoReflect.Descriptor instead.
func (*RedisService_Route) Descriptor() ([]byte, []int) {
	return file_redis_v1alpha1_redisservice_proto_rawDescGZIP(), []int{0, 5}
}

func (x *RedisService_Route) GetMatch() *RedisService_RouteMatch {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *RedisService_Route) GetRoute() *RedisService_Destination {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *RedisService_Route) GetMirror() []*RedisService_Mirror {
	if x != nil {
		return x.Mirror
	}
	return nil
}

var File_redis_v1alpha1_redisservice_proto protoreflect.FileDescriptor

var file_redis_v1alpha1_redisservice_proto_rawDesc = []byte{
	0x0a, 0x21, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b,
	0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x72, 0x65,
	0x64, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x0c, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x05, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x61, 0x65,
	0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xfb,
	0x04, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x6c, 0x75,
	0x73, 0x68, 0x12, 0x4b, 0x0a, 0x14, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x65, 0x0a, 0x20, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x74, 0x61,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x61,
	0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x47, 0x0a, 0x08,
	0x4b, 0x65, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0x5a, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e,
	0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x1a, 0x3b, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xc9,
	0x01, 0x0a, 0x06, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e,
	0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0xe1, 0x01, 0x0a, 0x05, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x61,
	0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x48, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e,
	0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x55,
	0x0a, 0x0a, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4e, 0x59, 0x10, 0x04, 0x22, 0x1f, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x05, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2e, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2e, 0x69, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x1c, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x65, 0x72, 0x61, 0x6b, 0x69, 0x2d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redis_v1alpha1_redisservice_proto_rawDescOnce sync.Once
	file_redis_v1alpha1_redisservice_proto_rawDescData = file_redis_v1alpha1_redisservice_proto_rawDesc
)

func file_redis_v1alpha1_redisservice_proto_rawDescGZIP() []byte {
	file_redis_v1alpha1_redisservice_proto_rawDescOnce.Do(func() {
		file_redis_v1alpha1_redisservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_redis_v1alpha1_redisservice_proto_rawDescData)
	})
	return file_redis_v1alpha1_redisservice_proto_rawDescData
}

var file_redis_v1alpha1_redisservice_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_redis_v1alpha1_redisservice_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_redis_v1alpha1_redisservice_proto_goTypes = []interface{}{
	(RedisService_ReadPolicy)(0),     // 0: redis.aeraki.io.v1alpha1.RedisService.ReadPolicy
	(Fault_Type)(0),                  // 1: redis.aeraki.io.v1alpha1.Fault.Type
	(*RedisService)(nil),             // 2: redis.aeraki.io.v1alpha1.RedisService
	(*Percent)(nil),                  // 3: redis.aeraki.io.v1alpha1.Percent
	(*Fault)(nil),                    // 4: redis.aeraki.io.v1alpha1.Fault
	(*RedisService_Settings)(nil),    // 5: redis.aeraki.io.v1alpha1.RedisService.Settings
	(*RedisService_KeyMatch)(nil),    // 6: redis.aeraki.io.v1alpha1.RedisService.KeyMatch
	(*RedisService_RouteMatch)(nil),  // 7: redis.aeraki.io.v1alpha1.RedisService.RouteMatch
	(*RedisService_Destination)(nil), // 8: redis.aeraki.io.v1alpha1.RedisService.Destination
	(*RedisService_Mirror)(nil),      // 9: redis.aeraki.io.v1alpha1.RedisService.Mirror
	(*RedisService_Route)(nil),       // 10: redis.aeraki.io.v1alpha1.RedisService.Route
	(*duration.Duration)(nil),        // 11: google.protobuf.Duration
	(*wrappers.UInt32Value)(nil),     // 12: google.protobuf.UInt32Value
	(*Auth)(nil),                     // 13: redis.aeraki.io.v1alpha1.Auth
}
var file_redis_v1alpha1_redisservice_proto_depIdxs = []int32{
	5,  // 0: redis.aeraki.io.v1alpha1.RedisService.settings:type_name -> redis.aeraki.io.v1alpha1.RedisService.Settings
	10, // 1: redis.aeraki.io.v1alpha1.RedisService.redis:type_name -> redis.aeraki.io.v1alpha1.RedisService.Route
	4,  // 2: redis.aeraki.io.v1alpha1.RedisService.faults:type_name -> redis.aeraki.io.v1alpha1.Fault
	1,  // 3: redis.aeraki.io.v1alpha1.Fault.type:type_name -> redis.aeraki.io.v1alpha1.Fault.Type
	3,  // 4: redis.aeraki.io.v1alpha1.Fault.percentage:type_name -> redis.aeraki.io.v1alpha1.Percent
	11, // 5: redis.aeraki.io.v1alpha1.Fault.delay:type_name -> google.protobuf.Duration
	11, // 6: redis.aeraki.io.v1alpha1.RedisService.Settings.op_timeout:type_name -> google.protobuf.Duration
	11, // 7: redis.aeraki.io.v1alpha1.RedisService.Settings.buffer_flush_timeout:type_name -> google.protobuf.Duration
	12, // 8: redis.aeraki.io.v1alpha1.RedisService.Settings.max_upstream_unknown_connections:type_name -> google.protobuf.UInt32Value
	0,  // 9: redis.aeraki.io.v1alpha1.RedisService.Settings.read_policy:type_name -> redis.aeraki.io.v1alpha1.RedisService.ReadPolicy
	13, // 10: redis.aeraki.io.v1alpha1.RedisService.Settings.auth:type_name -> redis.aeraki.io.v1alpha1.Auth
	6,  // 11: redis.aeraki.io.v1alpha1.RedisService.RouteMatch.key:type_name -> redis.aeraki.io.v1alpha1.RedisService.KeyMatch
	8,  // 12: redis.aeraki.io.v1alpha1.RedisService.Mirror.route:type_name -> redis.aeraki.io.v1alpha1.RedisService.Destination
	3,  // 13: redis.aeraki.io.v1alpha1.RedisService.Mirror.percentage:type_name -> redis.aeraki.io.v1alpha1.Percent
	7,  // 14: redis.aeraki.io.v1alpha1.RedisService.Route.match:type_name -> redis.aeraki.io.v1alpha1.RedisService.RouteMatch
	8,  // 15: redis.aeraki.io.v1alpha1.RedisService.Route.route:type_name -> redis.aeraki.io.v1alpha1.RedisService.Destination
	9,  // 16: redis.aeraki.io.v1alpha1.RedisService.Route.mirror:type_name -> redis.aeraki.io.v1alpha1.RedisService.Mirror
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_redis_v1alpha1_redisservice_proto_init() }
func file_redis_v1alpha1_redisservice_proto_init() {
	if File_redis_v1alpha1_redisservice_proto != nil {
		return
	}
	file_redis_v1alpha1_redisdestination_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_redis_v1alpha1_redisservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_v1alpha1_redisservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Percent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_v1alpha1_redisservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_v1alpha1_redisservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisService_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_v1alpha1_redisservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisService_KeyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_v1alpha1_redisservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisService_RouteMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_v1alpha1_redisservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisService_Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_v1alpha1_redisservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisService_Mirror); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_v1alpha1_redisservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisService_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_redis_v1alpha1_redisservice_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*RedisService_RouteMatch_Key)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redis_v1alpha1_redisservice_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_redis_v1alpha1_redisservice_proto_goTypes,
		DependencyIndexes: file_redis_v1alpha1_redisservice_proto_depIdxs,
		EnumInfos:         file_redis_v1alpha1_redisservice_proto_enumTypes,
		MessageInfos:      file_redis_v1alpha1_redisservice_proto_msgTypes,
	}.Build()
	File_redis_v1alpha1_redisservice_proto = out.File
	file_redis_v1alpha1_redisservice_proto_rawDesc = nil
	file_redis_v1alpha1_redisservice_proto_goTypes = nil
	file_redis_v1alpha1_redisservice_proto_depIdxs = nil
}
